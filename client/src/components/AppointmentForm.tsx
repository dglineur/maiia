import React, { useEffect } from 'react';
import { Appointment } from 'store/types';
import {
  Box,
  Button,
  Grid,
  Hidden,
  MenuItem,
  Select,
  styled,
} from '@material-ui/core';
import {
  getPractitioners,
  practitionersSelectors,
  selectedPractitionerId,
  setSelectedPractitionerId,
} from 'store/practitioners';
import { useDispatch, useSelector } from 'react-redux';
import {
  getPatients,
  patientsSelectors,
  selectedPatientId,
  setSelectedPatientId,
} from 'store/patients';
import {
  availabilitiesSelectors,
  getAvailabilities,
  selectedAvailabilityId,
  setSelectedAvailabilityId,
} from 'store/availabilities';
import { createNewAppointment } from 'store/appointments';
import { formatDateRange } from 'utils/date';
import { Controller, useForm } from 'react-hook-form';

const AppointmentForm = () => {
  const {
    register,
    handleSubmit,
    watch,
    control,
    setValue,
    formState: { errors },
  } = useForm();

  const dispatch = useDispatch();
  const patientId = useSelector(selectedPatientId);
  const practitionerId = useSelector(selectedPractitionerId);
  const availabilityId = useSelector(selectedAvailabilityId);

  const practitioners = useSelector((state) =>
    practitionersSelectors.selectAll(state.practitioners),
  );

  useEffect(() => {
    dispatch(getPractitioners());
  }, []);

  const patients = useSelector((state) =>
    patientsSelectors.selectAll(state.patients),
  );
  useEffect(() => {
    dispatch(getPatients());
  }, []);

  const availabilities = useSelector((state) =>
    availabilitiesSelectors.selectAll(state.availabilities),
  );

  useEffect(() => {
    if (practitionerId) {
      dispatch(getAvailabilities(practitionerId));
    }
  }, [practitionerId]);

  const handleAppointmentCreation = () => {
    if (selectedAvailabilityId) {
      const selectedAvailability = availabilities.find(
        (availability) => availability.id === availabilityId,
      );
      const appointment: Appointment = {
        id: 0, //fake id that will be autogenerated after, it should be a better way to do it
        patientId: patientId,
        practitionerId: practitionerId,
        startDate: selectedAvailability.startDate,
        endDate: selectedAvailability.endDate,
      };

      dispatch(createNewAppointment(appointment));
      setValue('availabilitiesList', '');
    } else {
      alert('No appointment selected');
    }
  };

  //to be coherent, we better use makeStyles, but in the case of simple component like span and div, styledComponents can be a great option too
  //so, because it's a test and not an prod application, i'll use styledComponent here and makeStyles in AppointmentCard
  const RequiredField = styled('span')(({ theme }) => ({
    paddingLeft: `5px`,
    color: 'red',
  }));

  const FieldLabel = styled('span')(({ theme }) => ({
    paddingRight: `5px`,
    minWidth: '75px',
  }));

  return (
    <React.Fragment>
      <Box display="flex" flexDirection="column" py={2}>
        <form
          id="appointment-creation"
          onSubmit={handleSubmit(handleAppointmentCreation)}
        >
          <Grid container xs={12}>
            <Grid item wrap={'wrap'} xs={12} md={4} lg={3} xl={2}>
              <FieldLabel>Choose a practitioner :</FieldLabel>
            </Grid>
            <Grid item wrap={'wrap'} xs={12} md={8} lg={9} xl={10}>
              <Controller
                control={control}
                name={'practitionerList'}
                rules={{ required: true }}
                render={({ field }) => (
                  <Select
                    id={'practitionerList'}
                    onChange={(event) => {
                      field.onChange(event.target.value);
                      dispatch(setSelectedPractitionerId(event.target.value));
                    }}
                  >
                    {practitioners.map((practitioner, index) => {
                      return (
                        <MenuItem value={practitioner.id} key={index}>
                          {practitioner.firstName} {practitioner.lastName}
                        </MenuItem>
                      );
                    })}
                  </Select>
                )}
              />
              {errors.practitionerList && (
                <RequiredField>This field is required</RequiredField>
              )}
            </Grid>
          </Grid>
          <Grid container xs={12}>
            <Grid item wrap={'wrap'} xs={12} md={4} lg={3} xl={2}>
              <FieldLabel>Choose a patient :</FieldLabel>
            </Grid>
            <Grid item wrap={'wrap'} xs={12} md={8} lg={9} xl={10}>
              <Controller
                control={control}
                name={'patientList'}
                rules={{ required: true }}
                render={({ field }) => (
                  <Select
                    id={'patientList'}
                    onChange={(event) => {
                      field.onChange(event.target.value);
                      dispatch(setSelectedPatientId(event.target.value));
                    }}
                  >
                    {patients.map((patient, index) => {
                      return (
                        <MenuItem value={patient.id} key={index}>
                          {patient.firstName} {patient.lastName}
                        </MenuItem>
                      );
                    })}
                  </Select>
                )}
              />
              {errors.patientList && (
                <RequiredField>This field is required</RequiredField>
              )}
            </Grid>
          </Grid>
          <Grid container xs={12}>
            <Grid item wrap={'wrap'} xs={12} md={4} lg={3} xl={2}>
              <FieldLabel>Availabilities :</FieldLabel>
            </Grid>
            <Grid item wrap={'wrap'} xs={12} md={8} lg={9} xl={10}>
              <Controller
                control={control}
                name={'availabilitiesList'}
                rules={{ required: true }}
                render={({ field }) => (
                  <Select
                    id={'availabilitiesList'}
                    onChange={(event) => {
                      field.onChange(event.target.value);
                      dispatch(setSelectedAvailabilityId(event.target.value));
                    }}
                  >
                    {availabilities.map((availability, index) => {
                      return (
                        <MenuItem value={availability.id} key={index}>
                          {formatDateRange({
                            from: new Date(availability.startDate),
                            to: new Date(availability.endDate),
                          })}
                        </MenuItem>
                      );
                    })}
                  </Select>
                )}
              />
              {errors.availabilitiesList && (
                <RequiredField>This field is required</RequiredField>
              )}
            </Grid>
          </Grid>
          <Grid container>
            <Grid item>
              <Box py={2}>
                <Button
                  type={'submit'}
                  form="appointment-creation"
                  variant="outlined"
                >
                  Create Appointment
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Box>
    </React.Fragment>
  );
};

export default AppointmentForm;
